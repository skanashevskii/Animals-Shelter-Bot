package ru.devpro.listener;

import com.pengrad.telegrambot.TelegramBot;

import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;

import com.pengrad.telegrambot.request.SendMessage;
import org.springframework.stereotype.Component;

import ru.devpro.enums.BotCommand;

import java.util.*;

@Component
public class ButtonCommand implements Command {
    private final TelegramBot bot;


    public ButtonCommand(TelegramBot bot) {
        this.bot = bot;

    }

    public boolean ifSuitable(Update update) {
        if (update != null && update.message() != null) {
            String text = update.message().text();
            return Arrays.stream(BotCommand.values())
                    .anyMatch(botCommand -> botCommand.getCommand().equalsIgnoreCase(text));
        }

            return false;
    }


    public void handle(Update update) {
        var chatId = update.message().chat().id();
        String text = update.message().text();
        BotCommand command = Arrays.stream(BotCommand.values())
                .filter(cmd -> cmd.getCommand().equalsIgnoreCase(text))
                .findFirst()
                .orElse(null);
        if (command != null) {
            String description = command.getDescription();
            bot.execute(new SendMessage(chatId, description));
        } else {
            bot.execute(new SendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
        }

        if (text.equals("/start")) {
            String downArrow = "üëá";  // –°–∏–º–≤–æ–ª —Å–º–∞–π–ª–∏–∫–∞
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            InlineKeyboardButton button1 = new InlineKeyboardButton("–ü—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫")
                    .callbackData("–ü—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫");
            InlineKeyboardButton button2 = new InlineKeyboardButton("–ü—Ä–∏—é—Ç –¥–ª—è —Å–æ–±–∞–∫")
                    .callbackData("–ü—Ä–∏—é—Ç –¥–ª—è —Å–æ–±–∞–∫");
            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup(button1, button2);
            SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É" + downArrow);
            message.replyMarkup(markupInline);
            bot.execute(message);
        }else if (update.callbackQuery() != null) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
            String callbackData = update.callbackQuery().data();
            if (callbackData.equals("–ü—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫")) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
                sendCatShelterOptions(chatId);
            } else if (callbackData.equals("–ü—Ä–∏—é—Ç –¥–ª—è —Å–æ–±–∞–∫")) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–∏—é—Ç –¥–ª—è —Å–æ–±–∞–∫, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
                sendDogShelterOptions(chatId);
            }
        }
    }

        private void sendCatShelterOptions(Long chatId) {
            InlineKeyboardButton button3 = new InlineKeyboardButton("–û–ø—Ü–∏—è 1")
                    .callbackData("option1");
            InlineKeyboardButton button4 = new InlineKeyboardButton("–û–ø—Ü–∏—è 2")
                    .callbackData("option2");

            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup(button3, button4);

            SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:");
            message.replyMarkup(markupInline);

            bot.execute(message);
        }
    private void sendDogShelterOptions(Long chatId) {
        // –°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π –ø—Ä–∏—é—Ç–∞ –¥–ª—è —Å–æ–±–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö
    }







    }



